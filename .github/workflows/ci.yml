name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.image.name }}
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        image:
          - name: revo-devcontainer-databricks
            dockerfile: ./src/revo-devcontainer-databricks/Dockerfile
            tag: 15.4-LTS
            context: ./src/revo-devcontainer-databricks
            python_version: 3.11.11
            databricks_version: 15.4-LTS
            platforms: linux/amd64

          - name: revo-devcontainer-databricks
            dockerfile: ./src/revo-devcontainer-databricks/Dockerfile
            tag: 16.4-LTS
            context: ./src/revo-devcontainer-databricks
            python_version: 3.12.4
            databricks_version: 16.4-LTS
            platforms: linux/amd64

          - name: revo-devcontainer-slim
            dockerfile: ./src/revo-devcontainer-slim/Dockerfile
            tag: "3.11.11-slim"
            context: ./src/revo-devcontainer-slim
            python_version: 3.11.11
            platforms: linux/amd64

          - name: revo-devcontainer-slim
            dockerfile: ./src/revo-devcontainer-slim/Dockerfile
            tag: 3.12.4-slim
            context: ./src/revo-devcontainer-slim
            python_version: 3.12.4
            platforms: linux/amd64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and test image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.image.context }}
          file: ${{ matrix.image.dockerfile }}
          build-args: |
            PYTHON_VERSION=${{ matrix.image.python_version }}
            DATABRICKS_VERSION=${{ matrix.image.databricks_version }}
            UBUNTU_VERSION=${{ matrix.image.ubuntu_version }}
          tags: ${{ matrix.image.name }}:${{ matrix.image.tag }}
          cache-from: type=gha,scope=${{ matrix.image.name }}-${{ matrix.image.tag }}
          cache-to: type=gha,mode=max,scope=${{ matrix.image.name }}-${{ matrix.image.tag }}
          load: true

      - name: Test image basic functionality
        run: |
          echo "üöÄ Testing basic image functionality..."
          echo "  ‚Üí Testing container startup and basic command execution..."
          
          if docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} echo "Image loaded successfully" > /dev/null 2>&1; then
            echo "    ‚úÖ Container starts and runs commands successfully"
          else
            echo "    ‚ùå Container failed to start or run basic commands"
            exit 1
          fi
          
      - name: Test image-specific functionality
        run: |
          echo "=========================================="
          echo "Testing specific functionality for: ${{ matrix.image.name }}"
          echo "=========================================="
          
          case "${{ matrix.image.name }}" in
            "revo-devcontainer-databricks")
              echo "üêç Testing Databricks runtime specific tools..."
              
              echo "  ‚Üí Testing Python..."
              if docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} python --version > /dev/null 2>&1; then
                echo "    ‚úÖ Python found: $(docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} python --version)"
              else
                echo "    ‚ùå Python not found - REQUIRED FOR DATABRICKS RUNTIME"
                exit 1
              fi
              
              echo "  ‚Üí Testing Databricks CLI..."
              if docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} databricks --version > /dev/null 2>&1; then
                echo "    ‚úÖ Databricks CLI found: $(docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} databricks --version)"
              else
                echo "    ‚ùå Databricks CLI not found - REQUIRED FOR DATABRICKS RUNTIME"
                exit 1
              fi
              
              echo "  ‚Üí Testing UV package manager..."
              if docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} uv --version > /dev/null 2>&1; then
                echo "    ‚úÖ UV found: $(docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} uv --version)"
              else
                echo "    ‚ùå UV not found - REQUIRED FOR DATABRICKS RUNTIME"
                exit 1
              fi
              
              echo "  ‚Üí Testing enhanced shell (zsh)..."
              if docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} zsh --version > /dev/null 2>&1; then
                echo "    ‚úÖ Zsh found: $(docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} zsh --version)"
              else
                echo "    ‚ùå Zsh not found - REQUIRED FOR ENHANCED SHELL"
                exit 1
              fi
              
              echo "  ‚Üí Testing Python import capabilities..."
              if docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} python -c "import sys; print(f'Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}')" > /dev/null 2>&1; then
                echo "    ‚úÖ Python import test successful"
              else
                echo "    ‚ùå Python import test failed - CRITICAL ERROR"
                exit 1
              fi
              ;;
              
            "revo-devcontainer-slim")
              echo "ü™∂ Testing slim container specific tools..."
              
              echo "  ‚Üí Testing Python..."
              if docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} python --version > /dev/null 2>&1; then
                echo "    ‚úÖ Python found: $(docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} python --version)"
              else
                echo "    ‚ùå Python not found - REQUIRED FOR SLIM CONTAINER"
                exit 1
              fi
              
              echo "  ‚Üí Testing Python execution..."
              if docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} python -c "print('Python working in slim container')" > /dev/null 2>&1; then
                echo "    ‚úÖ Python execution test successful"
              else
                echo "    ‚ùå Python execution test failed - CRITICAL ERROR"
                exit 1
              fi
              
              echo "  ‚Üí Testing pip..."
              if docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} which pip > /dev/null 2>&1; then
                echo "    ‚úÖ Pip found: $(docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} pip --version)"
              else
                echo "    ‚ùå Pip not found - REQUIRED FOR SLIM CONTAINER"
                exit 1
              fi
              ;;
          esac
          
          echo "=========================================="

      - name: Test container security
        run: |
          echo "üîí Testing container security..."
          echo "  ‚Üí Testing non-root user execution..."
          
          if docker run --rm --user 1000:1000 ${{ matrix.image.name }}:${{ matrix.image.tag }} echo "Non-root user test successful" > /dev/null 2>&1; then
            echo "    ‚úÖ Container can run as non-root user (UID: 1000, GID: 1000)"
          else
            echo "    ‚ö†Ô∏è  Container requires root user or has permission issues"
            echo "    ‚ÑπÔ∏è  This is expected for containers that need root privileges"
          fi

      - name: Test container size and layers
        run: |
          echo "üìä Analyzing container metrics..."
          echo "  ‚Üí Image size and details:"
          docker images ${{ matrix.image.name }}:${{ matrix.image.tag }} --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.CreatedSince}}"
          
          echo ""
          echo "  ‚Üí Layer history (showing top 10 layers):"
          docker history ${{ matrix.image.name }}:${{ matrix.image.tag }} --no-trunc | head -11
          
          echo ""
          echo "  ‚Üí Total layers:"
          LAYER_COUNT=$(docker history ${{ matrix.image.name }}:${{ matrix.image.tag }} --quiet | wc -l)
          echo "    üìã Total layers: $LAYER_COUNT"
          
          if [ $LAYER_COUNT -gt 20 ]; then
            echo "    ‚ö†Ô∏è  High layer count detected - consider optimizing Dockerfile"
          else
            echo "    ‚úÖ Layer count looks reasonable"
          fi