name: CI/CD

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.image.name }}
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        image:
          - name: revo-devops-agent
            dockerfile: ./src/revo-devops-agent/Dockerfile
            tag: "24.04"
            context: ./src/revo-devops-agent

          - name: revo-devcontainer-databricksruntime
            dockerfile: ./src/revo-devcontainer-databricksruntime/Dockerfile
            tag: "15.4-LTS"
            context: ./src/revo-devcontainer-databricksruntime

          - name: revo-devcontainer-slim
            dockerfile: ./src/revo-devcontainer-slim/Dockerfile
            tag: "3.11.11"
            context: ./src/revo-devcontainer-slim

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.image.context }}
          file: ${{ matrix.image.dockerfile }}
          tags: ${{ matrix.image.name }}:${{ matrix.image.tag }}
          cache-from: type=gha,scope=${{ matrix.image.name }}
          cache-to: type=gha,mode=min,scope=${{ matrix.image.name }}
          outputs: type=docker,dest=/tmp/${{ matrix.image.name }}.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.image.name }}
          path: /tmp/${{ matrix.image.name }}.tar

  test:
    name: Test ${{ matrix.image.name }}
    runs-on: ubuntu-latest
    needs: build
    
    strategy:
      fail-fast: false
      matrix:
        image:
          - name: revo-devops-agent
            dockerfile: ./src/revo-devops-agent/Dockerfile
            tag: "24.04"
            context: ./src/revo-devops-agent

          - name: revo-devcontainer-databricksruntime
            dockerfile: ./src/revo-devcontainer-databricksruntime/Dockerfile
            tag: "15.4-LTS"
            context: ./src/revo-devcontainer-databricksruntime

          - name: revo-devcontainer-slim
            dockerfile: ./src/revo-devcontainer-slim/Dockerfile
            tag: "3.11.11"
            context: ./src/revo-devcontainer-slim

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.image.name }}
          path: /tmp

      - name: Load image
        run: |
          echo "📦 Loading container image from artifact..."
          docker load --input /tmp/${{ matrix.image.name }}.tar
          
          echo ""
          echo "📋 Available images after loading:"
          docker image ls -a

      - name: Test image basic functionality
        run: |
          echo "🚀 Testing basic image functionality..."
          echo "  → Testing container startup and basic command execution..."
          
          if docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} echo "Image loaded successfully" > /dev/null 2>&1; then
            echo "    ✅ Container starts and runs commands successfully"
          else
            echo "    ❌ Container failed to start or run basic commands"
            exit 1
          fi
          
      - name: Test image-specific functionality
        run: |
          echo "=========================================="
          echo "Testing specific functionality for: ${{ matrix.image.name }}"
          echo "=========================================="
          
          case "${{ matrix.image.name }}" in
            "revo-devops-agent")
              echo "🔧 Testing DevOps agent specific tools..."
              
              echo "  → Testing for Git..."
              if docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} which git > /dev/null 2>&1; then
                echo "    ✅ Git found: $(docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} git --version)"
              else
                echo "    ❌ Git not found - REQUIRED FOR DEVOPS AGENT"
                exit 1
              fi
              
              echo "  → Testing for Docker (not expected in this container)..."
              if docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} which docker > /dev/null 2>&1; then
                echo "    ✅ Docker found in container"
              else
                echo "    ℹ️  Docker not found (expected - Docker not installed in this image)"
              fi
              
              echo "  → Testing for Python..."
              if docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} python --version > /dev/null 2>&1; then
                echo "    ✅ Python found: $(docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} python --version)"
              else
                echo "    ❌ Python not found - REQUIRED FOR DEVOPS AGENT"
                exit 1
              fi
              
              echo "  → Testing for Poetry..."
              if docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} poetry --version > /dev/null 2>&1; then
                echo "    ✅ Poetry found: $(docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} poetry --version)"
              else
                echo "    ❌ Poetry not found - REQUIRED FOR DEVOPS AGENT"
                exit 1
              fi
              
              echo "  → Testing for UV..."
              if docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} uv --version > /dev/null 2>&1; then
                echo "    ✅ UV found: $(docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} uv --version)"
              else
                echo "    ❌ UV not found - REQUIRED FOR DEVOPS AGENT"
                exit 1
              fi
              ;;
              
            "revo-devcontainer-databricksruntime")
              echo "🐍 Testing Databricks runtime specific tools..."
              
              echo "  → Testing Python..."
              if docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} python --version > /dev/null 2>&1; then
                echo "    ✅ Python found: $(docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} python --version)"
              else
                echo "    ❌ Python not found - REQUIRED FOR DATABRICKS RUNTIME"
                exit 1
              fi
              
              echo "  → Testing pip..."
              if docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} which pip > /dev/null 2>&1; then
                echo "    ✅ Pip found: $(docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} pip --version)"
              else
                echo "    ❌ Pip not found - REQUIRED FOR DATABRICKS RUNTIME"
                exit 1
              fi
              
              echo "  → Testing Python import capabilities..."
              if docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} python -c "import sys; print(f'Python {sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}')" > /dev/null 2>&1; then
                echo "    ✅ Python import test successful"
              else
                echo "    ❌ Python import test failed - CRITICAL ERROR"
                exit 1
              fi
              ;;
              
            "revo-devcontainer-slim")
              echo "🪶 Testing slim container specific tools..."
              
              echo "  → Testing Python..."
              if docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} python --version > /dev/null 2>&1; then
                echo "    ✅ Python found: $(docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} python --version)"
              else
                echo "    ❌ Python not found - REQUIRED FOR SLIM CONTAINER"
                exit 1
              fi
              
              echo "  → Testing Python execution..."
              if docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} python -c "print('Python working in slim container')" > /dev/null 2>&1; then
                echo "    ✅ Python execution test successful"
              else
                echo "    ❌ Python execution test failed - CRITICAL ERROR"
                exit 1
              fi
              
              echo "  → Testing pip..."
              if docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} which pip > /dev/null 2>&1; then
                echo "    ✅ Pip found: $(docker run --rm ${{ matrix.image.name }}:${{ matrix.image.tag }} pip --version)"
              else
                echo "    ❌ Pip not found - REQUIRED FOR SLIM CONTAINER"
                exit 1
              fi
              ;;
          esac
          
          echo "=========================================="

      - name: Test container security
        run: |
          echo "🔒 Testing container security..."
          echo "  → Testing non-root user execution..."
          
          if docker run --rm --user 1000:1000 ${{ matrix.image.name }}:${{ matrix.image.tag }} echo "Non-root user test successful" > /dev/null 2>&1; then
            echo "    ✅ Container can run as non-root user (UID: 1000, GID: 1000)"
          else
            echo "    ⚠️  Container requires root user or has permission issues"
            echo "    ℹ️  This is expected for containers that need root privileges"
          fi

      - name: Test container size and layers
        run: |
          echo "📊 Analyzing container metrics..."
          echo "  → Image size and details:"
          docker images ${{ matrix.image.name }}:${{ matrix.image.tag }} --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.CreatedSince}}"
          
          echo ""
          echo "  → Layer history (showing top 10 layers):"
          docker history ${{ matrix.image.name }}:${{ matrix.image.tag }} --no-trunc | head -11
          
          echo ""
          echo "  → Total layers:"
          LAYER_COUNT=$(docker history ${{ matrix.image.name }}:${{ matrix.image.tag }} --quiet | wc -l)
          echo "    📋 Total layers: $LAYER_COUNT"
          
          if [ $LAYER_COUNT -gt 20 ]; then
            echo "    ⚠️  High layer count detected - consider optimizing Dockerfile"
          else
            echo "    ✅ Layer count looks reasonable"
          fi

  deploy:
    name: Deploy ${{ matrix.image.name }}
    runs-on: ubuntu-latest
    needs: [build, test]
    # Only deploy on main branch pushes, not on PRs
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    strategy:
      fail-fast: false
      matrix:
        image:
          - name: revo-devops-agent
            dockerfile: ./src/revo-devops-agent/Dockerfile
            tag: "24.04"
            context: ./src/revo-devops-agent

          - name: revo-devcontainer-databricksruntime
            dockerfile: ./src/revo-devcontainer-databricksruntime/Dockerfile
            tag: "15.4-LTS"
            context: ./src/revo-devcontainer-databricksruntime

          - name: revo-devcontainer-slim
            dockerfile: ./src/revo-devcontainer-slim/Dockerfile
            tag: "3.11.11"
            context: ./src/revo-devcontainer-slim

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.image.context }}
          file: ${{ matrix.image.dockerfile }}
          push: true
          cache-from: type=gha,scope=${{ matrix.image.name }}
          cache-to: type=gha,mode=min,scope=${{ matrix.image.name }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.image.name }}:${{ matrix.image.tag }}
            ghcr.io/${{ github.repository_owner }}/${{ matrix.image.name }}:latest

      - name: Deploy summary
        run: |
          echo "🚀 Successfully deployed:"
          echo "  📦 ghcr.io/${{ github.repository_owner }}/${{ matrix.image.name }}:${{ matrix.image.tag }}"
          echo "  📦 ghcr.io/${{ github.repository_owner }}/${{ matrix.image.name }}:latest"